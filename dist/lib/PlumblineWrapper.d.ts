export declare class PlumblineWrapper<T> {
    private renderer;
    private renderPromise;
    private rendering;
    private currentElement;
    constructor();
    /**
     * Create PlumblineWrapper
     * @param nodes
     * @param testComponent
     * @param testModule
     * @param options
     * @returns {PlumblineWrapper<T>}
     */
    create(nodes: any, testComponent: T, testModule: any, options: any): PlumblineWrapper<T>;
    private existing;
    /**
     * Render the Component
     * @returns {Promise<PlumblineWrapper<T>>}
     */
    render(): Promise<PlumblineWrapper<T>>;
    private checkRender;
    /**
     * Get ElementRef of PlumblineWrapper
     * @return ElementRef of current PlumblineWrapper
     */
    element(): any;
    /**
     * Find child element within PlumblineWrapper
     * @return child elements matched
     */
    find(cssOrDirective: any): Array<PlumblineWrapper<T>>;
    /**
     * Find parent element of PlumblineWrapper
     * @return parent of PlumblineWrapper
     */
    parent(): PlumblineWrapper<T>;
    /**
     * Get the instance of this Component in TestBed
     * @returns instance of Component in TestBed
     */
    instance(component?: any): any;
    /**
     * Get the bindings that were used in this Component instance
     * @returns bindings used to create this Component
     */
    bindings(): any;
    /**
     * Get the fixture generated by TestBed
     * @returns fixture for Component generated by TestBed
     */
    fixture(): any;
    /**
     * Wait for the instance and DOM to update
     */
    update(): Promise<PlumblineWrapper<T>>;
    tester(): any;
    /**
     * Get the module used in this Component instance test
     * @returns complete module put together by PlumblineWrapper
     */
    module(): any;
}
