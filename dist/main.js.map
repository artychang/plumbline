{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/index.ts","webpack:///./src/lib/PlumblineAdapter.ts","webpack:///./src/lib/PlumblineRenderer.ts","webpack:///./src/lib/PlumblineWrapper.ts","webpack:///./src/lib/models/Renderer.ts","webpack:///./src/lib/models/Rendering.ts","webpack:///./src/lib/models/Tester.ts","webpack:///./src/lib/mount.ts","webpack:///./src/lib/utils/compilerReflector.ts","webpack:///./src/lib/utils/initComponent.ts","webpack:///./src/lib/utils/utils.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","'use strict';\n\nexport {mount} from './lib/mount';\nexport {PlumblineWrapper} from './lib/PlumblineWrapper';\n\n// Future work with automatic mounting\n// export {deep} from './deep';\n// export {shallow} from './shallow';\n","import PlumblineRenderer from './PlumblineRenderer';\nimport Rendering from './models/Rendering';\n\n/**\n * Adapter future support for different Angular versions\n */\nexport default class PlumblineAdapter\n{\n\n    options: any;\n    MODES: any = {\n        MOUNT: 'mount',\n        SHALLOW: 'shallow'\n    };\n\n    constructor() {\n        this.options = {};\n    }\n\n    /**\n     *. Create a mounted renderer\n     */\n    createMountRenderer(optionsRender: any): any  {\n        return {\n            render(element: any,\n                   options: any,\n                   testComponent: any,\n                   testModule: any): Promise<Rendering> {\n                let renderer = new PlumblineRenderer(testComponent, testModule);\n                return renderer.render(element, options);\n            }\n        };\n    }\n\n    /**\n\t*. Create a shallow renderer\n\t*/\n    createShallowRenderer(optionsRender: any) {\n        return null;\n    }\n\n    createRenderer(options: any) {\n        switch (options.mode) {\n            case this.MODES.MOUNT: return this.createMountRenderer(options);\n            case this.MODES.SHALLOW: return this.createShallowRenderer(options);\n            default:\n                throw new Error(`Plumbline Adapter Error: incorrect mode : ${options.mode}`);\n        }\n    }\n\n}\n","'use strict';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport Renderer from './models/Renderer';\nimport Rendering from './models/Rendering';\nimport {Tester} from './models/Tester';\n\nexport default class PlumblineRenderer {\n\n    tester: Tester<any>;\n    neverMock = [CommonModule, BrowserModule];\n\n    constructor(testComponent: any, testModule: any) {\n        this.tester = new Tester(testComponent, testModule);\n        this.tester.dontMock.push(... this.neverMock);\n    }\n\n    render(html: any, renderOptions: any): Promise<Rendering> {\n        let renderer = new Renderer(this.tester);\n        return renderer.render(html, renderOptions);\n    }\n\n}\n","import PlumblineAdapter from './PlumblineAdapter';\nimport {DebugElement} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport Rendering from './models/Rendering';\n\nexport class PlumblineWrapper<T>\n{\n    private renderer: any = null;\n    private renderPromise: Promise<Rendering> = null;\n    private rendering: Rendering = null;\n    private currentElement: DebugElement = null;\n\n\n    constructor() {\n        // Generate a renderer for mount operation\n        this.renderer = (new PlumblineAdapter()).createRenderer({mode: 'mount'});\n    }\n\n    /**\n     * Create PlumblineWrapper\n     * @param nodes\n     * @param testComponent\n     * @param testModule\n     * @param options\n     * @returns {PlumblineWrapper<T>}\n     */\n    create(nodes: any, testComponent: T, testModule: any, options: any): PlumblineWrapper<T> {\n        this.renderPromise = this.renderer.render(\n            nodes,\n            options ? options : {},\n            testComponent,\n            testModule ? testModule : {});\n        return this;\n    }\n\n    private existing(unrendering: Promise<Rendering>,\n                     rendering: Rendering,\n                     current: DebugElement): PlumblineWrapper<T> {\n        this.renderPromise = unrendering;\n        this.rendering = rendering;\n        this.currentElement = current;\n        return this;\n    }\n\n    /**\n     * Render the Component\n     * @returns {Promise<PlumblineWrapper<T>>}\n     */\n    async render(): Promise<PlumblineWrapper<T>> {\n        return new Promise<PlumblineWrapper<T>>((resolve: any, reject: any) => {\n            this.renderPromise.then((rendering) => {\n                this.rendering = rendering;\n                this.currentElement = this.rendering.element;\n                this.renderPromise = null;\n                resolve(this);\n            });\n        });\n    }\n\n    private checkRender(): void {\n        if (this.rendering == null) {\n            throw new Error('Use render() and await on PlumblineWrapper ' +\n                'to complete the rendering process.');\n        }\n    }\n\n\n    /**\n     * Get ElementRef of PlumblineWrapper\n     * @return ElementRef of current PlumblineWrapper\n     */\n    element(): any {\n        this.checkRender();\n        return this.currentElement.nativeNode;\n    }\n\n    /**\n     * Find child element within PlumblineWrapper\n     * @return child elements matched\n     */\n    find(cssOrDirective: any): Array<PlumblineWrapper<T>> {\n        this.checkRender();\n        let query = null;\n        if (typeof cssOrDirective === 'string') {\n            query = By.css(cssOrDirective);\n        } else {\n            query = By.directive(cssOrDirective);\n        }\n\n        let matches = this.currentElement.queryAll(query);\n        if (matches.length && matches[0] === this.currentElement) {\n            throw new Error(`Don't use 'find' to search for your test component, ` +\n                `it is automatically returned by the mount renderer`);\n        }\n\n        let wrapperArray: Array<PlumblineWrapper<T>> = [];\n        matches.forEach((elem) => {\n            wrapperArray.push((new PlumblineWrapper<T>()).existing(this.renderPromise,\n                this.rendering, elem));\n        });\n        return wrapperArray;\n    }\n\n    /**\n     * Find parent element of PlumblineWrapper\n     * @return parent of PlumblineWrapper\n     */\n    parent(): PlumblineWrapper<T> {\n        return (new PlumblineWrapper<T>()).existing(this.renderPromise,\n            this.rendering, this.currentElement.parent);\n    }\n\n    /**\n     * Get the instance of this Component in TestBed\n     * @returns instance of Component in TestBed\n     */\n    instance(component?: any): any {\n        this.checkRender();\n        if (!component) {\n            // Give the root instance for no arguments\n            return this.rendering.instance;\n        } else {\n            try {\n                // Give the current element instance for specific component\n                return this.currentElement.injector.get(component);\n            } catch (e) {\n                throw new Error('Plumbline could not inject ' +\n                    component.name + ' directive onto DOM element ' +\n                    this.currentElement.name);\n            }\n        }\n    }\n\n    /**\n     * Get the bindings that were used in this Component instance\n     * @returns bindings used to create this Component\n     */\n    bindings(): any {\n        this.checkRender();\n        return this.rendering.bindings;\n    }\n\n    /**\n     * Get the fixture generated by TestBed\n     * @returns fixture for Component generated by TestBed\n     */\n    fixture(): any {\n        this.checkRender();\n        return this.rendering.fixture;\n    }\n\n    /**\n     * Wait for the instance and DOM to update\n     */\n    async update(): Promise<PlumblineWrapper<T>> {\n        return new Promise<PlumblineWrapper<T>>((resolve: any, reject: any) => {\n            this.checkRender();\n            if (this.rendering.instance.ngOnChanges) {\n                this.rendering.instance.ngOnChanges();\n            }\n            this.rendering.fixture.detectChanges();\n            return this.rendering.fixture.whenStable().then(() => {\n                resolve(this);\n            });\n        });\n    }\n\n    tester(): any {\n        return this.rendering.tester;\n    }\n\n    /**\n     * Get the module used in this Component instance test\n     * @returns complete module put together by PlumblineWrapper\n     */\n    module(): any {\n        return this.rendering.tester.completeModule;\n    }\n}\n","'use strict';\nimport {TestBed} from '@angular/core/testing';\nimport Rendering from './Rendering';\nimport {Tester} from './Tester';\nimport {isValueProvider} from '../utils/utils';\nimport {initComponent} from '../utils/initComponent';\n\nexport default class Renderer {\n\n    tester: Tester<any>;\n    completeModule: any = null;\n    renderModule: any = null;\n\n    constructor(tester: Tester<any>) {\n        this.tester = tester;\n        this.completeModule = this.tester.getCompleteModule();\n    }\n\n    // Render the entire TestBed of the component + markup\n    render(html: any, optionsIn: any): Promise<Rendering> {\n\n        // Options for binding and future customization\n        let options = Object.assign({detectChanges: true, bind: {}}, optionsIn);\n\n        // Initialize the markup for the component\n        let curComponent: any = html ? initComponent(html, options.bind) :\n            this.tester.testComponent;\n\n        // Generate the complete module from all the pieces\n        let copiedSetup = this.completeModule;\n\n        let configTestingSettings = {\n            imports: copiedSetup.imports,\n            providers: copiedSetup.providers.map((p) => {\n                return this.spyProvider(p);\n            }),\n            declarations: copiedSetup.declarations.concat([curComponent]),\n            schemas: copiedSetup.schemas,\n        };\n\n        this.renderModule = configTestingSettings;\n\n        // Start Testing Module using autogenerated custom config settings\n        return new Promise<Rendering>((resolve, reject) => {\n\n            /*\n            // Detect javascript errors and track them in Jasmine\n            if (!(\"plumbline\" in console)) {\n                (<any> console).plumbline = {};\n\n                let __error = console.error;\n                console.error = function(...args) {\n\n                    // Assert no javascript errors in plumbline\n                    if ((<any> console).plumbline.active) {\n                        let fullMessage = '';\n                        args.forEach((message) => { fullMessage += message + ' '; });\n                        expect('javascript errors').toBe('none', fullMessage);\n                    }\n\n                    // Still report errors in the debug console\n                    __error.apply(console, args);\n                };\n            }\n            */\n\n            try {\n                // Initialize TestBed for this Component\n                TestBed.configureTestingModule(configTestingSettings)\n                    .compileComponents().then(() => {\n                    let fixture = TestBed.createComponent(curComponent);\n                    if (options.detectChanges) {\n                        fixture.detectChanges();\n                    }\n                    // Return a Rendering object\n                    resolve(new Rendering(this.tester, fixture, options.bind));\n                });\n            } catch (err) {\n                console.log(configTestingSettings);\n                console.error(err);\n            }\n\n        });\n\n    }\n\n    // Spy on all providers\n    spyProvider(providerIn: any): any {\n\n        // for arrays, breakdown the individual providers\n        if (Array.isArray(providerIn)) {\n            return providerIn.map((p) => {\n                return this.spyProvider(p);\n            });\n\n        } else {\n\n            // Check for providers that come in {provide, useValue} form\n            if (isValueProvider(providerIn)) {\n                let provide = providerIn.provide;\n                let useValue = providerIn.useValue;\n\n                if (provide && !this.tester.dontMock.includes(provide)) {\n\n                    // go through all the objects functions and spyOn the,\n                    Object.keys(useValue).forEach(function (key) {\n                        if (typeof useValue[key] === 'function') {\n                            spyOn(useValue, key).and.callThrough();\n                        }\n                    });\n                    return {provide, useValue};\n                }\n            } else {\n                return providerIn;\n            }\n        }\n    }\n}\n","'use strict';\nimport {By} from '@angular/platform-browser';\nimport {Tester} from './Tester';\n\nexport default class Rendering\n{\n    fixture: any;\n    bindings: any;\n    tester: any;\n    element: any;\n    instance: any;\n\n    constructor(tester: Tester<any>, fixture: any, bindings: any) {\n        this.tester = tester;\n        this.fixture = fixture;\n\n        // Find the element in the markup\n        if (this.fixture.componentInstance instanceof this.tester.testComponent) {\n            this.element = this.fixture.debugElement;\n        } else {\n            this.element = this.fixture.debugElement.query(By.directive(this.tester.testComponent));\n        }\n\n        // Throw an error if the element was not found\n        if (!this.element) {\n            throw new Error(this.tester.testComponent.name + ' not found in html/template/markup');\n        }\n\n        this.instance = this.element.injector.get(this.tester.testComponent);\n        this.bindings = bindings;\n    }\n\n}\n","import {MockDeclaration, MockOf} from 'ng-mocks';\nimport {NgModule} from '@angular/core';\nimport {resolveNgModule, isModuleWithProviders, isNgModule} from './../utils/utils';\nimport {CommonModule} from '@angular/common';\n\n/**\n * Break a module up into its individual references.\n * @param ngModule\n * @returns references to the parts of the module\n */\nexport function resolveModule(ngModule: any) {\n    let ngMod = null;\n    if (typeof ngModule === 'object') {\n        ngMod = ngModule;\n    } else if (typeof ngModule === 'function') {\n        ngMod = resolveNgModule(ngModule) || {};\n    } else {\n        throw new Error('Plumbline doesn\\'t know how to resolve module: ' + ngModule);\n    }\n    if (ngMod.imports === void 0) { ngMod.imports = []; }\n    if (ngMod.providers === void 0) { ngMod.providers = []; }\n    if (ngMod.declarations === void 0) { ngMod.declarations = []; }\n    if (ngMod.exports === void 0) { ngMod.exports = []; }\n    if (ngMod.entryComponents === void 0) { ngMod.entryComponents = []; }\n    if (ngMod.schemas === void 0) { ngMod.schemas = []; }\n    return ngMod;\n}\n\n/**\n * Completely copy the module pieces\n * @param ngModule\n * @returns complete clone of module\n */\nexport function copyModule(ngModule: any) {\n    let imports = ngModule.imports === void 0 ? [] : ngModule.imports;\n    let providers = ngModule.providers === void 0 ? [] : ngModule.providers;\n    let declarations = ngModule.declarations === void 0 ? [] : ngModule.declarations;\n    let exports = ngModule.exports === void 0 ? [] : ngModule.exports;\n    let entryComponents = ngModule.entryComponents === void 0 ? [] : ngModule.entryComponents;\n    let schemas = ngModule.schemas === void 0 ? [] : ngModule.schemas;\n    return {\n        imports: [].concat(imports),\n        providers: [].concat(providers),\n        declarations: [].concat(declarations),\n        exports: [].concat(exports),\n        entryComponents: [].concat(entryComponents),\n        schemas: [].concat(schemas)\n    };\n}\n\nexport class Tester<T>\n{\n    testComponent: T;\n    options: any;\n    dontMock: any[];\n\n    mockModule: any;\n    mountModule: any;\n\n    completeModule = {\n        imports: <any> [],\n        declarations: <any> [],\n        providers: <any> [],\n        exports: <any> [],\n        entryComponents: <any> [],\n        schemas: <any> []\n    };\n\n    cacheModule = {\n        imports: new Map(),\n        declarations: new Map(),\n        providers: new Map(),\n        exports: new Map(),\n        entryComponents: new Map(),\n        schemas: new Map()\n    };\n\n    baseModule = {\n        imports: new Set(),\n        declarations: new Set(),\n        providers: new Set(),\n        exports: new Set(),\n        entryComponents: new Set(),\n        schemas: new Set()\n    };\n\n    constructor(testComponent: T, options: any = {}) {\n        this.testComponent = testComponent;\n        this.options = typeof options === 'object' ? options : {};\n\n        this.mockModule = this.options.mockModule ? this.options.mockModule : null;\n        this.mountModule = this.options.mountModule ? this.options.mountModule : null;\n\n        // list of things not to mock\n        this.dontMock = [];\n        this.dontMock.push(...Array.isArray(this.options.dontMock) ? this.options.dontMock : []);\n    }\n\n    getCompleteModule() {\n\n        // Process the test component in question first\n        this.processModule({\n            declarations: [this.testComponent]\n        }, true);\n\n        // Process the mount module next\n        let mountModule = this.mountModule ? copyModule(resolveModule(this.mountModule)) : {\n            imports: [],\n            declarations: [],\n            providers: [],\n            exports: [],\n            entryComponents: [],\n            schemas: []\n        };\n\n        // Process the mock module next\n        let mockModule = this.mockModule ? copyModule(resolveModule(this.mockModule)) : {\n            imports: [],\n            declarations: [],\n            providers: [],\n            exports: [],\n            entryComponents: [],\n            schemas: []\n        };\n\n        // Combine the schemas\n        this.completeModule.schemas = mountModule.schemas.concat(mockModule.schemas);\n\n        // Process both modules\n        this.processModule(mountModule, true);\n        this.processModule(mockModule, false);\n\n        let completeModule = this.completeModule;\n        return completeModule;\n    }\n\n    processModule(mod: any, dontmock?: boolean): void {\n\n        // Clear declarations\n        while ((mod.imports && mod.imports.length > 0) ||\n            (mod.declarations && mod.declarations.length > 0) ||\n            (mod.providers && mod.providers.length > 0)) {\n\n            while (mod.providers && mod.providers.length > 0) {\n                let providers = mod.providers.shift();\n                this.mockProv(providers, mod, dontmock);\n            }\n\n            let imports = mod.imports;\n            mod.imports = [];\n            if (imports) {\n                this.baseImp(imports, dontmock);\n            }\n\n            let declarations = mod.declarations;\n            mod.declarations = [];\n            if (declarations) {\n                this.baseDec(declarations, dontmock, this.completeModule.imports);\n            }\n\n        }\n\n    }\n\n    // ++++++++++++++++++++++++++++++++++++++++\n    //   Declarations\n    // ++++++++++++++++++++++++++++++++++++++++\n\n\n    // Check the cache for this particular declaration or list of declarations\n    listDec(thing: any, dontmock: boolean, addedImports: any[] = [], runningList: any[] = []): any {\n\n        let resmod = createPropImport(thing, {\n            declarations: [],\n            imports: [],\n            exports: [],\n            entryComponents: [],\n            schemas: this.completeModule.schemas\n        });\n\n        let resobj = resolveModule(resmod);\n\n        // do not cache the test component in question\n        if (thing === this.testComponent) { return resmod; }\n\n        // check to see if declaration is in cache\n        if (this.cacheModule.declarations.has(thing)) {\n            // Add the cached module containing the declaration to imports\n            resobj.imports.push(this.cacheModule.declarations.get(thing));\n            resobj.exports.push(this.cacheModule.declarations.get(thing));\n            return resmod;\n        }\n\n        // Breakdown arrays\n        if (Array.isArray(thing)) {\n            thing.forEach((single) => {\n                if (single && !runningList.includes(single)) {\n                    let tempDec = resolveModule(\n                        this.listDec(single, dontmock, addedImports, runningList)\n                    );\n                    resobj.imports.push(...tempDec.imports);\n                    resobj.declarations.push(...tempDec.declarations);\n                    resobj.exports.push(...tempDec.exports);\n                }\n            });\n\n        } else {\n\n            let pointer = null;\n\n            // use the regular component if we specify\n            if (this.dontMock.includes(thing) || dontmock) {\n                pointer = thing;\n\n            } else { // actually mock the component\n                try {\n                    pointer = createMockDeclaration(thing);\n                } catch (e) {\n                    throw new Error('Plumbline had trouble mocking ' +\n                        ((thing && thing.name) ? thing.name : thing) + '.\\n' + e);\n                }\n            }\n\n            resobj.declarations.push(pointer);\n            resobj.exports.push(pointer);\n            runningList.push(thing);\n        }\n\n        // Cache all declarations traversed under this response module\n        runningList.forEach((single) => {\n            this.cacheModule.declarations.set(single, resmod);\n        });\n\n        resobj.imports.push(...addedImports);\n        return resmod;\n    }\n\n    // Check the cache for this particular declaration or list of declarations\n    cacheDec(thing: any, dontmock: boolean, addedImports: any[] = []): any[] {\n\n        // do not cache the test component in question\n        if (thing === this.testComponent) { return []; }\n\n        // check to see if declaration is in cache\n        if (!this.cacheModule.declarations.has(thing)) {\n\n            // Breakdown arrays\n            if (Array.isArray(thing)) {\n                let decList = [];\n                thing.forEach((single) => {\n                    decList.push(...this.cacheDec(single, dontmock, addedImports));\n                });\n                return decList;\n            }\n\n            let pointer = null;\n\n            // use the regular component if we specify\n            if (this.dontMock.includes(thing) || dontmock) {\n                pointer = thing;\n\n            } else { // actually mock the component\n                try {\n                    pointer = createMockDeclaration(thing);\n                } catch (e) {\n                    throw new Error('Plumbline had trouble mocking ' +\n                        ((thing && thing.name) ? thing.name : thing) + '.\\n' + e);\n                }\n            }\n\n            pointer = createPropImport(thing, {\n                declarations: [pointer],\n                imports: addedImports,\n                exports: [pointer],\n                schemas: this.completeModule.schemas\n            });\n\n            this.cacheModule.declarations.set(thing, pointer);\n            return [pointer];\n\n        } else { // return a module wrapper for declarations already in cache\n            return [this.cacheModule.declarations.get(thing)];\n        }\n    }\n\n    // Mocking declaration components\n    baseDec(thingList: any[], dontmock: boolean, addedImports: any[] = []): void {\n\n        thingList.forEach((thing) => {\n\n            // Exit if the base module already has the declaration\n            if (this.baseModule.declarations.has(thing)) { return; }\n\n            // directly mount the test component\n            if (thing === this.testComponent) {\n                if (this.cacheModule.declarations.has(thing)) { return; }\n                this.completeModule.declarations.push(thing);\n                this.cacheModule.declarations.set(thing, thing);\n                this.baseModule.declarations.add(thing);\n                return;\n            }\n\n            // Breakdown arrays\n            if (Array.isArray(thing)) {\n                this.baseDec(thing, dontmock, addedImports);\n                return;\n            }\n\n            // let pointerList = this.cacheDec(thing, dontmock, addedImports);\n            // if (pointerList.length > 0) {\n            //     this.completeModule.imports.push(...pointerList);\n            //     this.baseModule.declarations.add(thing);\n            // }\n\n            if (thing) {\n                let pointerList = this.listDec(thing, dontmock, addedImports);\n                this.completeModule.imports.push(pointerList);\n                this.baseModule.declarations.add(thing);\n            }\n        });\n    }\n\n    // ++++++++++++++++++++++++++++++++++++++++\n    //   Providers\n    // ++++++++++++++++++++++++++++++++++++++++\n\n    // Mocking provide providers\n    mockProv(thing: any, mod: any, dontmock?: boolean): void {\n\n        // Stop if provider is in cache\n        if (this.cacheModule.providers.has(thing)) { return; }\n\n        if (Array.isArray(thing)) {\n            thing.forEach((single) => {\n                mod.providers.push(single);\n            });\n            return;\n        }\n\n        let provide;\n        if (typeof thing === 'function') {\n            provide = thing;\n        } else {\n            provide = thing.provide;\n        }\n\n        let pointer = null;\n        // Use the regular provider if we specify or it is already mocked\n        if (this.dontMock.includes(provide) || dontmock || provide !== thing) {\n            pointer = thing;\n            this.completeModule.providers.push(pointer);\n        } else {\n            pointer = {provide: provide, useValue: createMockProvider(provide)};\n            this.completeModule.providers.push(pointer);\n        }\n        this.cacheModule.providers.set(thing, pointer);\n        // this.cacheModule.providers.set(provide, pointer);\n    }\n\n    // ++++++++++++++++++++++++++++++++++++++++\n    //   Imports\n    // ++++++++++++++++++++++++++++++++++++++++\n\n    cacheImp(thing: any, dontmock: boolean = false, exportmock: boolean = false): any[] {\n        // Stop if import is in cache\n        if (!this.cacheModule.imports.has(thing)) {\n\n            // Breakdown arrays\n            if (Array.isArray(thing)) {\n                let impList = [];\n                thing.forEach((single) => {\n                    impList.push(...this.cacheImp(single, dontmock));\n                });\n                return impList;\n            }\n\n            // Handle the special ModuleWithProviders case\n            if (isModuleWithProviders(thing)) {\n                let copied = copyModule(resolveModule(thing));\n\n                if (dontmock) {\n\n                    let pointer1: any = null;\n                    pointer1 = createPropImport(thing, copied);\n\n                    // Create a container for the module\n                    pointer1 = createPropImport(thing, {\n                        imports: [pointer1],\n                        exports: [pointer1],\n                        schemas: this.completeModule.schemas\n                    });\n\n                    this.cacheModule.imports.set(thing, pointer1);\n                    return [pointer1];\n\n                } else {\n\n                    delete copied['ngModule'];\n                    let baselineMod = [this.cacheImp(thing.ngModule, dontmock)];\n                    // if (dontmock)\n                    //    baselineMod.push(this.cacheImp(copied, dontmock));\n                    return baselineMod;\n\n                }\n            }\n\n            let pointer: any = null;\n            // Use the regular import if we specify\n            if (this.dontMock.includes(thing) || exportmock) {\n                pointer = thing;\n            } else {\n                let copied = copyModule(resolveModule(thing));\n\n                // Cache the imports\n                let imps = [];\n                copied.imports.forEach((single) => {\n                    let resSingle = this.cacheImp(single, dontmock);\n                    imps.push(...resSingle);\n                });\n                copied.imports = [].concat(imps);\n\n                // Cache the declarations and wrap them all in NgModules\n                let decls = [];\n\n                if (copied.declarations) {\n                    let resSingle1 = this.listDec(copied.declarations, dontmock, imps);\n                    decls.push(resSingle1);\n\n                    // Move dependencies into the queue for top layer processing\n                    this.baseDec(copied.declarations, dontmock, imps);\n                }\n\n                // Move the declarations to imports encased in NgModules\n                copied.imports.push(...decls);\n                copied.declarations = [];\n\n                // Cache the exports\n                let expts = [];\n                copied.exports.forEach((single) => {\n                    if (isNgModule(single)) {\n\n                        let resSingle = this.cacheImp(single, dontmock, true);\n                        expts.push(...resSingle);\n\n                    } else if (single) {\n\n                        let resSingle = this.listDec(single, dontmock, imps);\n                        expts.push(resSingle);\n\n                    }\n                });\n                copied.exports = expts;\n                copied.schemas = this.completeModule.schemas;\n\n                // Leave out entryComponents when mocking\n                if (!dontmock) {\n                    copied.entryComponents = [];\n                }\n\n                pointer = createPropImport(thing, copied);\n                // pointer = createMockImport(thing);\n            }\n\n            // Create a container for the module\n            pointer = createPropImport(thing, {\n                imports: [pointer],\n                exports: [pointer],\n                schemas: this.completeModule.schemas\n            });\n\n            this.cacheModule.imports.set(thing, pointer);\n            return [pointer];\n        } else {\n            return [this.cacheModule.imports.get(thing)];\n        }\n    }\n\n    // Mocking import modules\n    baseImp(thingList: any[], dontmock?: boolean): void {\n\n        thingList.forEach((thing) => {\n            // Breakdown arrays\n            if (Array.isArray(thing)) {\n                this.baseImp(thing, dontmock);\n                return;\n            }\n\n            let pointerList = this.cacheImp(thing, dontmock);\n            this.completeModule.imports.push(...pointerList);\n        });\n    }\n}\n\nexport function createMockDeclaration(inDeclaration: any): any {\n    return MockDeclaration(inDeclaration);\n}\n\nexport function createMockImport(inImport: any): any {\n    @NgModule({\n        imports: [],\n        declarations: [],\n        exports: [],\n        entryComponents: [],\n        providers: [],\n        schemas: []\n    })\n    @MockOf(inImport)\n    class MockModuleContainer {}\n    return MockModuleContainer;\n}\n\nexport function createPropImport(inImport: any, propImport?: any): any {\n    let modA = {\n        imports: [],\n        declarations: [],\n        exports: [],\n        entryComponents: [],\n        providers: [],\n        schemas: []\n    };\n    if (propImport) {\n        modA.imports = propImport.imports ? propImport.imports : [];\n        modA.declarations = propImport.declarations ? propImport.declarations : [];\n        modA.exports = propImport.exports ? propImport.exports : [];\n        modA.entryComponents = propImport.entryComponents ? propImport.entryComponents : [];\n        modA.providers = propImport.providers ? propImport.providers : [];\n        modA.schemas = propImport.schemas ? propImport.schemas : [];\n    }\n    @NgModule(modA)\n    @MockOf(inImport)\n    class MockModuleContainer {}\n    return MockModuleContainer;\n}\n\nexport function createMockProvider(mockedClass: any): any {\n    class MockProvider {\n        mockOf: any;\n        constructor(mockOf: any, mockProperties?: any) {\n            this.mockOf = mockOf;\n            (<any> Object).assign(this, mockProperties === void 0 ? {} : mockProperties);\n        }\n    }\n\n    let methods = getClassMethods(mockedClass);\n    methods.forEach((m: any) => {\n        // mock and replace all functions of this class\n        (<any> MockProvider).prototype[m] = () => {\n            // send an understandable message if this function is vital to component operation\n            return 'Plumbline::mount function called: ' + mockedClass.constructor.name + '.' + m;\n        };\n    });\n    // methods.forEach(m => spyOn(mockedClass.prototype, m));\n    return new MockProvider(mockedClass);\n}\n\nfunction getClassMethods(className: any): any {\n    // todo - add a check if it is an object or not\n    let ret = new Set();\n    function methods(obj: any) {\n        if (obj) {\n            let ps = Object.getOwnPropertyNames(obj);\n\n            ps.forEach(p => {\n                if (obj[p] instanceof Function) {\n                    ret.add(p);\n                } else {\n                    // Can add properties if needed\n                }\n            });\n            try {\n                methods(Object.getPrototypeOf(obj));\n            } catch (e) { return; }\n        }\n    }\n    try {\n        methods(className.prototype);\n    } catch (e) { return []; }\n\n    return Array.from(ret);\n}\n","import {PlumblineWrapper} from './PlumblineWrapper';\n\nexport function mount<T>(\n    node: any,\n    testComponent: any,\n    testModule?: any,\n    options?: any): Promise<PlumblineWrapper<T>>\n{\n    return (new PlumblineWrapper<T>()).create(node, testComponent, testModule, options).render();\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    CompileReflector, ExternalReference,\n    Identifiers, getUrlScheme, syntaxError\n} from '@angular/compiler';\nimport {\n    ANALYZE_FOR_ENTRY_COMPONENTS, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component, ComponentFactory, ComponentFactoryResolver, ComponentRef, ElementRef,\n    Injector, LOCALE_ID, NgModuleFactory, NgModuleRef, QueryList, Renderer2,\n    SecurityContext, TRANSLATIONS_FORMAT, TemplateRef, ViewContainerRef,\n    ViewEncapsulation, ɵCodegenComponentFactoryResolver, ɵEMPTY_ARRAY, ɵEMPTY_MAP,\n    ɵReflectionCapabilities as ReflectionCapabilities, ɵand, ɵccf, ɵcmf, ɵcrt, ɵdid,\n    ɵeld, ɵinlineInterpolate, ɵinterpolate, ɵmod, ɵmpd, ɵncd, ɵnov, ɵpad, ɵpid, ɵpod, ɵppd,\n    ɵprd, ɵqud, ɵregisterModuleFactory,\n    ɵstringify as stringify, ɵted, ɵunv, ɵvid\n} from '@angular/core';\n\nexport const MODULE_SUFFIX = '';\nconst builtinExternalReferences = createBuiltinExternalReferencesMap();\n\nexport class JitReflector implements CompileReflector {\n    public guards;\n    private reflectionCapabilities: ReflectionCapabilities;\n    private builtinExternalReferences = new Map<ExternalReference, any>();\n    constructor() { this.reflectionCapabilities = new ReflectionCapabilities(); }\n    componentModuleUrl(type: any, cmpMetadata: Component): string {\n        const moduleId = cmpMetadata.moduleId;\n\n        if (typeof moduleId === 'string') {\n            const scheme = getUrlScheme(moduleId);\n            return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;\n        } else if (moduleId !== null && moduleId !== void 0) {\n            throw syntaxError(\n                `moduleId should be a string in \"${stringify(type)}\". ` +\n                `See https://goo.gl/wIDDiL for more information.\\n` +\n                `If you're using Webpack you should inline the template ` +\n                `and the styles, see https://goo.gl/X2J8zc.`);\n        }\n\n        return `./${stringify(type)}`;\n    }\n    parameters(typeOrFunc: /*Type*/ any): any[][] {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    tryAnnotations(typeOrFunc: /*Type*/ any): any[] { return this.annotations(typeOrFunc); }\n    annotations(typeOrFunc: /*Type*/ any): any[] {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    shallowAnnotations(typeOrFunc: /*Type*/ any): any[] {\n        throw new Error('Not supported in JIT mode');\n    }\n    propMetadata(typeOrFunc: /*Type*/ any): {[key: string]: any[]} {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    hasLifecycleHook(type: any, lcProperty: string): boolean {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    // guards(type: any): {[key: string]: any} { return this.reflectionCapabilities.guards(type); }\n    resolveExternalReference(ref: ExternalReference): any {\n        return builtinExternalReferences.get(ref) || ref.runtime;\n    }\n}\n\n\nfunction createBuiltinExternalReferencesMap() {\n    const map = new Map<ExternalReference, any>();\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\n    map.set(Identifiers.ElementRef, ElementRef);\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\n    map.set(Identifiers.QueryList, QueryList);\n    map.set(Identifiers.TemplateRef, TemplateRef);\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\n    map.set(Identifiers.ComponentRef, ComponentRef);\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\n    map.set(Identifiers.createModuleFactory, ɵcmf);\n    map.set(Identifiers.moduleDef, ɵmod);\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\n    map.set(Identifiers.Injector, Injector);\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\n    map.set(Identifiers.SecurityContext, SecurityContext);\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\n    map.set(Identifiers.interpolate, ɵinterpolate);\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\n    map.set(Identifiers.Renderer, Renderer2);\n    map.set(Identifiers.viewDef, ɵvid);\n    map.set(Identifiers.elementDef, ɵeld);\n    map.set(Identifiers.anchorDef, ɵand);\n    map.set(Identifiers.textDef, ɵted);\n    map.set(Identifiers.directiveDef, ɵdid);\n    map.set(Identifiers.providerDef, ɵprd);\n    map.set(Identifiers.queryDef, ɵqud);\n    map.set(Identifiers.pureArrayDef, ɵpad);\n    map.set(Identifiers.pureObjectDef, ɵpod);\n    map.set(Identifiers.purePipeDef, ɵppd);\n    map.set(Identifiers.pipeDef, ɵpid);\n    map.set(Identifiers.nodeValue, ɵnov);\n    map.set(Identifiers.ngContentDef, ɵncd);\n    map.set(Identifiers.unwrapValue, ɵunv);\n    map.set(Identifiers.createRendererType2, ɵcrt);\n    map.set(Identifiers.createComponentFactory, ɵccf);\n    return map;\n}\n","import {Component} from '@angular/core';\n\nfunction spyBindings(bindings: any) {\n    Object.keys(bindings).forEach(function (key) {\n        if (typeof bindings[key] === 'function') {\n            spyOn(bindings, key).and.callThrough();\n        }\n    });\n    return bindings;\n}\n\nexport function initComponent(template: any, bindings: any): any {\n    @Component({ template: template })\n    class RenderComponent {}\n    Object.assign(RenderComponent.prototype, spyBindings(bindings));\n\n    // Enable two-way binding that overwrites & updates input\n    Object.keys(bindings).forEach((key) => {\n        Object.defineProperty(RenderComponent.prototype, key, {\n            get: () => bindings[key],\n            set: (v) => { bindings[key] = v; }\n        });\n    });\n    return RenderComponent;\n}\n","import {JitReflector} from './compilerReflector';\nimport {DirectiveResolver, PipeResolver, NgModuleResolver} from '@angular/compiler';\n\nlet jitReflector = new JitReflector();\nlet pipeResolver = new PipeResolver(jitReflector);\nlet directiveResolver = new DirectiveResolver(jitReflector);\nlet ngModuleResolver = new NgModuleResolver(jitReflector);\n\nexport {jitReflector, pipeResolver, directiveResolver};\n\nexport function isValueProvider(provider: any): boolean {\n    return 'useValue' in provider;\n}\n\nexport function isClassProvider(provider: any): boolean {\n    return 'useClass' in provider;\n}\n\nexport function isModuleWithProviders(thing: any): boolean {\n    return 'ngModule' in thing;\n}\n\nexport function isNgModule(thing: any): boolean {\n    return ngModuleResolver.isNgModule(thing);\n}\n\nexport function resolveNgModule(thing: any): any {\n    return ngModuleResolver.resolve(thing);\n}\n"],"sourceRoot":""}